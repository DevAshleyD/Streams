{"ast":null,"code":"var _jsxFileName = \"/home/vinay/Streams/src/components/streams/StreamCreate.js\";\nimport React, { Component } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nexport class StreamCreate extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })), this.renderError(meta)) // we can also do like this using the traditional syntax\n      // <input \n      //     onChange={formProps.input.onChange} \n      //     value={formProps.input.value}\n      // />\n      ;\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  onSubmit(formValues) {\n    console.log(formValues);\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    // only ran if the user did not enter a title\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    // only ran if the user did not enter a title\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["/home/vinay/Streams/src/components/streams/StreamCreate.js"],"names":["React","Component","reduxForm","Field","StreamCreate","renderInput","input","label","meta","renderError","error","touched","onSubmit","formValues","console","log","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,YAAjC;AAEA,OAAO,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAYxCI,WAZwC,GAY1B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACtC,aACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACED,KADF,CADJ,EAIA,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJA,EAKC,KAAKG,WAAL,CAAiBD,IAAjB,CALD,CADJ,CAQI;AACA;AACA;AACA;AACA;AAZJ;AAcH,KA3BuC;AAAA;;AACxCC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAoB;AAC3B,QAAIA,OAAO,IAAID,KAAf,EAAqB;AACjB,aACG;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKA,KADL,CADJ,CADH;AAOH;AACJ;;AAiBDE,EAAAA,QAAQ,CAACC,UAAD,EAAY;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACH;;AACDG,EAAAA,MAAM,GAAG;AACL,WACI;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKN,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKP,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADJ;AAQH;;AAxCuC;;AA2C5C,MAAMc,QAAQ,GAAGN,UAAU,IAAI;AAC3B,QAAMO,MAAM,GAAG,EAAf;;AACA,MAAG,CAACP,UAAU,CAACQ,KAAf,EAAqB;AACjB;AACAD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AACD,MAAG,CAACR,UAAU,CAACS,WAAf,EAA2B;AACvB;AACAF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACH;;AACD,SAAOF,MAAP;AACH,CAXD;;AAaA,eAAelB,SAAS,CAAC;AACrBqB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA,QAAQ,EAAEA;AAFW,CAAD,CAAT,CAGZf,YAHY,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { reduxForm, Field } from 'redux-form';\n\nexport class StreamCreate extends Component {\n    renderError({ error, touched }){\n        if( touched && error){\n            return(\n               <div className=\"ui error message\">\n                   <div className=\"header\">\n                       {error}\n                   </div>\n               </div>\n            );\n        }\n    }\n    renderInput = ({ input, label, meta }) => {\n        return (\n            <div className=\"field\">\n                <label>\n                 {label}\n                </label>\n            <input {...input} autoComplete=\"off\"/>\n            {this.renderError(meta)}\n            </div>\n            // we can also do like this using the traditional syntax\n            // <input \n            //     onChange={formProps.input.onChange} \n            //     value={formProps.input.value}\n            // />\n        );\n    }\n    onSubmit(formValues){\n        console.log(formValues);\n    }\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\n                <Field name=\"title\" component={this.renderInput} label=\"Enter Title\"/>\n                <Field name=\"description\" component={this.renderInput} label=\"Enter Description\"/>\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n            \n        );  \n    }\n}\n\nconst validate = formValues => {\n    const errors = {};\n    if(!formValues.title){\n        // only ran if the user did not enter a title\n        errors.title = 'You must enter a title';\n    }\n    if(!formValues.description){\n        // only ran if the user did not enter a title\n        errors.description = 'You must enter a description';\n    }\n    return errors;\n};\n\nexport default reduxForm({\n    form: 'streamCreate',\n    validate: validate\n})(StreamCreate);\n"]},"metadata":{},"sourceType":"module"}