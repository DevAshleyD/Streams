{"ast":null,"code":"var _jsxFileName = \"/home/vinay/Streams/Client/src/components/streams/StreamCreate.js\";\nimport React, { Component } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport connect from 'react-redux';\nimport createStream from '../../actions';\nexport class StreamCreate extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      })), this.renderError(meta)) // we can also do like this using the traditional syntax\n      // <input \n      //     onChange={formProps.input.onChange} \n      //     value={formProps.input.value}\n      // />\n      ;\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  onSubmit(formValues) {\n    this.props.createStream(formValues);\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    // only ran if the user did not enter a title\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    // only ran if the user did not enter a description\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["/home/vinay/Streams/Client/src/components/streams/StreamCreate.js"],"names":["React","Component","reduxForm","Field","connect","createStream","StreamCreate","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,OAAO,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAYxCM,WAZwC,GAY1B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACtC,YAAMC,SAAS,mBAAYD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAnD,CAAf;AACA,aACI;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACEF,KADF,CADJ,EAIA,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJA,EAKC,KAAKM,WAAL,CAAiBJ,IAAjB,CALD,CADJ,CAQI;AACA;AACA;AACA;AACA;AAZJ;AAcH,KA5BuC;AAAA;;AACxCI,EAAAA,WAAW,CAAC;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAoB;AAC3B,QAAIA,OAAO,IAAID,KAAf,EAAqB;AACjB,aACG;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKA,KADL,CADJ,CADH;AAOH;AACJ;;AAkBDG,EAAAA,QAAQ,CAACC,UAAD,EAAY;AAChB,SAAKC,KAAL,CAAWZ,YAAX,CAAwBW,UAAxB;AACH;;AACDE,EAAAA,MAAM,GAAG;AACL,WACI;AAAM,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,eAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADJ;AAQH;;AAzCuC;;AA4C5C,MAAMa,QAAQ,GAAGJ,UAAU,IAAI;AAC3B,QAAMK,MAAM,GAAG,EAAf;;AACA,MAAG,CAACL,UAAU,CAACM,KAAf,EAAqB;AACjB;AACAD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AACD,MAAG,CAACN,UAAU,CAACO,WAAf,EAA2B;AACvB;AACAF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACH;;AACD,SAAOF,MAAP;AACH,CAXD;;AAaA,MAAMG,WAAW,GAAItB,SAAS,CAAC;AAC3BuB,EAAAA,IAAI,EAAE,cADqB;AAE3BL,EAAAA,QAAQ,EAAEA;AAFiB,CAAD,CAAT,CAGlBd,YAHkB,CAArB;AAIA,eAAeF,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA;AAAF,CAAP,CAAP,CAA+BmB,WAA/B,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport connect from 'react-redux';\nimport createStream from '../../actions';\n\nexport class StreamCreate extends Component {\n    renderError({ error, touched }){\n        if( touched && error){\n            return(\n               <div className=\"ui error message\">\n                   <div className=\"header\">\n                       {error}\n                   </div>\n               </div>\n            );\n        }\n    }\n    renderInput = ({ input, label, meta }) => {\n        const className = `field ${meta.error && meta.touched ? 'error':  ''}`;\n        return (\n            <div className={className}>\n                <label>\n                 {label}\n                </label>\n            <input {...input} autoComplete=\"off\"/>\n            {this.renderError(meta)}\n            </div>\n            // we can also do like this using the traditional syntax\n            // <input \n            //     onChange={formProps.input.onChange} \n            //     value={formProps.input.value}\n            // />\n        );\n    }\n    onSubmit(formValues){\n        this.props.createStream(formValues);\n    }\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field name=\"title\" component={this.renderInput} label=\"Enter Title\"/>\n                <Field name=\"description\" component={this.renderInput} label=\"Enter Description\"/>\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n            \n        );  \n    }\n}\n\nconst validate = formValues => {\n    const errors = {};\n    if(!formValues.title){\n        // only ran if the user did not enter a title\n        errors.title = 'You must enter a title';\n    }\n    if(!formValues.description){\n        // only ran if the user did not enter a description\n        errors.description = 'You must enter a description';\n    }\n    return errors;\n};\n\nconst formWrapped =  reduxForm({\n    form: 'streamCreate',\n    validate: validate\n})(StreamCreate);\nexport default connect(null, { createStream})(formWrapped);\n"]},"metadata":{},"sourceType":"module"}